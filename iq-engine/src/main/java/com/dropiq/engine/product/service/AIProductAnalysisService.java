package com.dropiq.engine.product.service;

import com.dropiq.engine.integration.ai.OllamaClient;
import com.dropiq.engine.integration.ai.model.ProductAnalysisResult;
import com.dropiq.engine.product.entity.DatasetCategory;
import com.dropiq.engine.product.entity.Product;
import com.dropiq.engine.product.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.CompletableFuture;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class AIProductAnalysisService {

    private final OllamaClient ollamaClient;
    private final ProductRepository productRepository;
    private final DynamicCategoryService categoryService;

    /**
     * –û–°–ù–û–í–ù–ò–ô –ú–ï–¢–û–î: –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç—É –∑ –ª–æ–≥—ñ–∫–æ—é –≥—Ä—É–ø–æ–≤–æ–≥–æ –ø–æ–¥—ñ–ª—É
     */
    @Async
    public CompletableFuture<Product> analyzeProduct(Long productId) {
        try {
            Product product = productRepository.findById(productId)
                    .orElseThrow(() -> new IllegalArgumentException("Product not found: " + productId));

            log.info("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ AI –∞–Ω–∞–ª—ñ–∑ –¥–ª—è: {} (–ì—Ä—É–ø–∞: {})",
                    product.getName(), product.getGroupId());

            // –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≥–æ—Ç–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏
            Optional<Product> existingAnalyzedProduct = findExistingAnalysis(product);

            if (existingAnalyzedProduct.isPresent()) {
                log.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –≥—Ä—É–ø–∏, –∫–æ–ø—ñ—é—î–º–æ");
                copyAiAnalysis(existingAnalyzedProduct.get(), product);
                return CompletableFuture.completedFuture(productRepository.save(product));
            }

            // –ö–†–û–ö 2: –í–∏–∫–æ–Ω—É—î–º–æ –Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
            ProductAnalysisResult analysis = performSmartAnalysis(product);

            // –ö–†–û–ö 3: –ó–Ω–∞—Ö–æ–¥–∏–º–æ/—Å—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            DatasetCategory category = categoryService.findOrCreateCategory(
                    product.getDatasets().iterator().next(),
                    analysis.getCategoryUk(),
                    analysis.getCategoryRu(),
                    analysis.getCategoryEn(),
                    null, null, null // –£–±–∏—Ä–∞—î–º–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
            );

            // –ö–†–û–ö 4: –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–≤–∞—Ä –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É
            updateProductWithAnalysis(product, analysis, category);
            product = productRepository.save(product);

            // –ö–†–û–ö 5: –ü–æ–¥—ñ–ª—è—î–º–æ—Å—è –∞–Ω–∞–ª—ñ–∑–æ–º –∑ —ñ–Ω—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –≥—Ä—É–ø—ñ
            shareAnalysisWithGroup(product);

            log.info("‚úÖ AI –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è: {}", product.getName());
            return CompletableFuture.completedFuture(product);

        } catch (Exception e) {
            log.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç–æ–≤–∞—Ä—É {}: {}", productId, e.getMessage(), e);
            throw new RuntimeException("AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ –≤–¥–∞–≤—Å—è: " + e.getMessage(), e);
        }
    }

    private Optional<Product> findExistingAnalysis(Product product) {
        if (product.getGroupId() == null || product.getGroupId().trim().isEmpty()) {
            return Optional.empty();
        }

        return productRepository.findByGroupIdAndSourceTypeAndAiAnalyzedTrue(
                product.getGroupId(),
                product.getSourceType()
        ).stream().findFirst();
    }

    /**
     * –†–û–ó–£–ú–ù–ò–ô –ê–ù–ê–õ–Ü–ó - –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ
     */
    private ProductAnalysisResult performSmartAnalysis(Product product) {
        log.info("üß† –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑—É–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ–≤–∞—Ä—É: {}", product.getName());

        // –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫—â–æ —î)
        ProductAnalysisResult visionResult = null;
        if (!product.getImageUrls().isEmpty()) {
            visionResult = ollamaClient.analyzeProductImage(
                    product.getImageUrls().get(0),
                    createSmartVisionPrompt()
            );
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è SEO –∫–æ–Ω—Ç–µ–Ω—Ç—É
        ProductAnalysisResult textResult = ollamaClient.generateMultilingualContent(
                createSmartTextPrompt(product, visionResult)
        );

        // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if (visionResult != null) {
            textResult.setMainFeatures(visionResult.getMainFeatures());
            textResult.setColors(visionResult.getColors());
            textResult.setStyle(visionResult.getStyle());
            textResult.setVisualQuality(visionResult.getVisualQuality());
        }

        return textResult;
    }

    /**
     * –ö–û–†–û–¢–ö–ò–ô –Ü –¢–û–ß–ù–ò–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨
     */
    private String createSmartVisionPrompt() {
        return """
            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —è–∫ –µ–∫—Å–ø–µ—Ä—Ç e-commerce. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —ñ —Ç–æ—á–Ω–∏–π –æ–ø–∏—Å.
            
            –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON:
            {
              "product_type": "—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Ç–æ–≤–∞—Ä—É (–º–∞–∫—Å 3 —Å–ª–æ–≤–∞)",
              "main_features": ["–∫–ª—é—á–æ–≤–∞ –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å 1", "–æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å 2"],
              "colors": ["–æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä"],
              "style": "—Å—Ç–∏–ª—å (modern/classic/sporty/elegant)",
              "visual_quality": 8.0
            }
            
            –í–ê–ñ–õ–ò–í–û:
            - –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º, –Ω–µ —Ä–æ–∑–º–∏–≤—á–∞—Å—Ç–∏–º
            - –ó–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞ —Ç–æ–º—É, —â–æ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –ø–æ–∫—É–ø–∫—É
            - –ú–∞–∫—Å–∏–º—É–º 2-3 –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ
            """;
    }

    /**
     * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –ü–†–û–ú–ü–¢ –î–õ–Ø SEO –ö–û–ù–¢–ï–ù–¢–£
     */
    private String createSmartTextPrompt(Product product, ProductAnalysisResult visionResult) {
        String baseInfo = String.format(
                "–¢–æ–≤–∞—Ä: %s\n–û–ø–∏—Å: %s\n–¶—ñ–Ω–∞: %s –≥—Ä–Ω\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: %s",
                product.getName(),
                cleanDescription(product.getOriginalDescription()),
                formatPrice(product.getOriginalPrice()),
                product.getExternalCategoryName() != null ? product.getExternalCategoryName() : "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
        );

        String visionInfo = "";
        if (visionResult != null && visionResult.getMainFeatures() != null) {
            visionInfo = "\n–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –∑ —Ñ–æ—Ç–æ: " + String.join(", ", visionResult.getMainFeatures());
        }

        return String.format("""
            –¢–∏ —Ç–æ–ø –∫–æ–ø—ñ—Ä–∞–π—Ç–µ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó e-commerce. –°—Ç–≤–æ—Ä–∏ –ø—Ä–æ–¥–∞—é—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É.
            
            –¢–û–í–ê–†: %s%s
            
            –°—Ç–≤–æ—Ä–∏ JSON –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —ñ –ø—Ä–æ–¥–∞—é—á–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:
            
            {
              "categories": {
                "main_uk": "—á—ñ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–º–∞–∫—Å 2-3 —Å–ª–æ–≤–∞)",
                "main_ru": "—á–µ—Ç–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä—É—Å—Å–∫–∏–º (–º–∞–∫—Å 2-3 —Å–ª–æ–≤–∞)",
                "main_en": "clear category English (max 2-3 words)"
              },
              "seo_titles": {
                "uk": "–ü—Ä–æ–¥–∞—é—á–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (40-50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏)",
                "ru": "–ü—Ä–æ–¥–∞—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä—É—Å—Å–∫–∏–º (40-50 —Å–∏–º–≤–æ–ª–æ–≤, —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)",
                "en": "Selling title English (40-50 characters, with keywords)"
              },
              "descriptions": {
                "uk": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —â–æ –ø—Ä–æ–¥–∞—î. –ß–æ–º—É –≤–∞—Ä—Ç–æ –∫—É–ø–∏—Ç–∏? –Ø–∫—ñ –ø–µ—Ä–µ–≤–∞–≥–∏? 50-80 —Å–ª—ñ–≤ –º–∞–∫—Å–∏–º—É–º.",
                "ru": "–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏–º –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–∞–µ—Ç. –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –∫—É–ø–∏—Ç—å? –ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞? 50-80 —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º.",
                "en": "Short selling description English. Why buy? What benefits? 50-80 words maximum."
              },
              "meta_descriptions": {
                "uk": "–ö–æ—Ä–æ—Ç–∫–∏–π –º–µ—Ç–∞-–æ–ø–∏—Å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (120-140 —Å–∏–º–≤–æ–ª—ñ–≤)",
                "ru": "–ö–æ—Ä–æ—Ç–∫–æ–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏–º (120-140 —Å–∏–º–≤–æ–ª–æ–≤)", 
                "en": "Short meta description English (120-140 characters)"
              },
              "tags": {
                "uk": ["—Ç–µ–≥1", "—Ç–µ–≥2", "—Ç–µ–≥3"],
                "ru": ["—Ç–µ–≥1", "—Ç–µ–≥2", "—Ç–µ–≥3"],
                "en": ["tag1", "tag2", "tag3"]
              },
              "target_audiences": {
                "uk": "–•—Ç–æ –∫—É–ø–∏—Ç—å —Ü–µ–π —Ç–æ–≤–∞—Ä? (1 —Ä–µ—á–µ–Ω–Ω—è)",
                "ru": "–ö—Ç–æ –∫—É–ø–∏—Ç —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä? (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)",
                "en": "Who will buy this product? (1 sentence)"
              },
              "trend_score": 7.5,
              "predicted_price_range": "mid-range",
              "style_tags": "modern, quality",
              "competitive_advantage": "–ì–æ–ª–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤–∞–≥–∞ –Ω–∞–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ (1 —Ä–µ—á–µ–Ω–Ω—è)",
              "urgency_triggers": "–ß–æ–º—É —Ç—Ä–µ–±–∞ –∫—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑ (1 —Ä–µ—á–µ–Ω–Ω—è)"
            }
            
            –ü–†–ê–í–ò–õ–ê:
            1. –ü–∏—à–∏ –ö–û–†–û–¢–ö–û —ñ –ü–û –°–£–¢–Ü - –±–µ–∑ –≤–æ–¥–∏
            2. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –ü–ï–†–ï–í–ê–ì–ê–•, –Ω–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö  
            3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–æ—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–ª–æ–≤–∞
            4. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–∞—é—Ç—å –ü–†–û–î–ê–í–ê–¢–ò, –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å—É–≤–∞—Ç–∏
            5. trend_score: 1-10 (—Ä–µ–∞–ª—å–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ 2025)
            6. –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–∫–ª–∞–¥–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
            7. –í—Å–µ –º–∞—î –∑–≤—É—á–∞—Ç–∏ –ü–†–ò–†–û–î–ù–û
            """, baseInfo, visionInfo);
    }

    private void copyAiAnalysis(Product source, Product target) {
        target.setAiAnalyzed(true);
        target.setAiAnalysisDate(LocalDateTime.now());
        target.setAiConfidenceScore(source.getAiConfidenceScore());
        target.setCategory(source.getCategory());

        // –ö–æ–ø—ñ—é—î–º–æ SEO –∫–æ–Ω—Ç–µ–Ω—Ç
        target.setSeoTitleUk(source.getSeoTitleUk());
        target.setSeoTitleRu(source.getSeoTitleRu());
        target.setSeoTitleEn(source.getSeoTitleEn());

        target.setDescriptionUk(source.getDescriptionUk());
        target.setDescriptionRu(source.getDescriptionRu());
        target.setDescriptionEn(source.getDescriptionEn());

        target.setMetaDescriptionUk(source.getMetaDescriptionUk());
        target.setMetaDescriptionRu(source.getMetaDescriptionRu());
        target.setMetaDescriptionEn(source.getMetaDescriptionEn());

        // –ö–æ–ø—ñ—é—î–º–æ —Ç–µ–≥–∏
        target.setTagsUk(new HashSet<>(source.getTagsUk()));
        target.setTagsRu(new HashSet<>(source.getTagsRu()));
        target.setTagsEn(new HashSet<>(source.getTagsEn()));

        // –ö–æ–ø—ñ—é—î–º–æ AI –∞—Ç—Ä–∏–±—É—Ç–∏
        target.setTrendScore(source.getTrendScore());
        target.setPredictedPriceRange(source.getPredictedPriceRange());
        target.setTargetAudienceUk(source.getTargetAudienceUk());
        target.setTargetAudienceRu(source.getTargetAudienceRu());
        target.setTargetAudienceEn(source.getTargetAudienceEn());
        target.setStyleTags(source.getStyleTags());
        target.setMainFeatures(source.getMainFeatures());
    }

    private void shareAnalysisWithGroup(Product analyzedProduct) {
        if (analyzedProduct.getGroupId() == null) return;

        List<Product> groupProducts = productRepository.findByGroupIdAndSourceTypeAndAiAnalyzedFalse(
                analyzedProduct.getGroupId(),
                analyzedProduct.getSourceType()
        );

        for (Product product : groupProducts) {
            copyAiAnalysis(analyzedProduct, product);
            productRepository.save(product);
        }

        log.info("üì§ –ü–æ–¥—ñ–ª–∏–≤—Å—è –∞–Ω–∞–ª—ñ–∑–æ–º –∑ {} —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –≥—Ä—É–ø—ñ", groupProducts.size());
    }

    private void updateProductWithAnalysis(Product product, ProductAnalysisResult analysis, DatasetCategory category) {
        product.setAiAnalyzed(true);
        product.setAiAnalysisDate(LocalDateTime.now());
        product.setAiConfidenceScore(calculateSmartConfidence(analysis));

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        product.setCategory(category);
        if (category != null) {
            category.addProduct(product);
        }

        // SEO –∫–æ–Ω—Ç–µ–Ω—Ç
        if (analysis.getSeoTitles() != null) {
            product.setSeoTitleUk(cleanText(analysis.getSeoTitles().get("uk")));
            product.setSeoTitleRu(cleanText(analysis.getSeoTitles().get("ru")));
            product.setSeoTitleEn(cleanText(analysis.getSeoTitles().get("en")));
        }

        if (analysis.getDescriptions() != null) {
            product.setDescriptionUk(cleanText(analysis.getDescriptions().get("uk")));
            product.setDescriptionRu(cleanText(analysis.getDescriptions().get("ru")));
            product.setDescriptionEn(cleanText(analysis.getDescriptions().get("en")));
        }

        if (analysis.getMetaDescriptions() != null) {
            product.setMetaDescriptionUk(cleanText(analysis.getMetaDescriptions().get("uk")));
            product.setMetaDescriptionRu(cleanText(analysis.getMetaDescriptions().get("ru")));
            product.setMetaDescriptionEn(cleanText(analysis.getMetaDescriptions().get("en")));
        }

        if (analysis.getTags() != null) {
            product.setTagsUk(cleanTags(analysis.getTags().get("uk")));
            product.setTagsRu(cleanTags(analysis.getTags().get("ru")));
            product.setTagsEn(cleanTags(analysis.getTags().get("en")));
        }

        if (analysis.getTargetAudience() != null) {
            product.setTargetAudienceUk(cleanText(analysis.getTargetAudience().get("uk")));
            product.setTargetAudienceRu(cleanText(analysis.getTargetAudience().get("ru")));
            product.setTargetAudienceEn(cleanText(analysis.getTargetAudience().get("en")));
        }

        // AI –∞—Ç—Ä–∏–±—É—Ç–∏
        product.setTrendScore(analysis.getTrendScore() != null ?
                BigDecimal.valueOf(Math.min(10.0, Math.max(1.0, analysis.getTrendScore()))) : null);
        product.setPredictedPriceRange(analysis.getPredictedPriceRange());
        product.setStyleTags(cleanText(analysis.getStyleTags()));

        if (analysis.getMainFeatures() != null && !analysis.getMainFeatures().isEmpty()) {
            product.setMainFeatures(String.join(", ", analysis.getMainFeatures()));
        }

        if (analysis.getColors() != null && !analysis.getColors().isEmpty()) {
            product.setColorAnalysis(String.join(", ", analysis.getColors()));
        }
    }

    // –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –û–ß–ò–©–ï–ù–ù–Ø –¢–ï–ö–°–¢–£
    private String cleanText(String text) {
        if (text == null) return null;
        return text.trim()
                .replaceAll("\\s+", " ")
                .replaceAll("\\.$", "");     // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫—Ä–∞–ø–∫—É –≤ –∫—ñ–Ω—Ü—ñ
    }

    private Set<String> cleanTags(List<String> tags) {
        if (tags == null) return new HashSet<>();
        return new HashSet<>(tags.stream()
                .filter(Objects::nonNull)
                .map(this::cleanText)
                .filter(tag -> tag != null && !tag.isEmpty())
                .limit(5) // –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–≥—ñ–≤
                .toList());
    }

    private String cleanDescription(String description) {
        if (description == null) return "–ù–µ–º–∞—î –æ–ø–∏—Å—É";
        return description.length() > 200 ? description.substring(0, 200) + "..." : description;
    }

    private String formatPrice(BigDecimal price) {
        if (price == null) return "–£—Ç–æ—á–Ω–∏—Ç–∏ —Ü—ñ–Ω—É";
        return String.format("%.0f", price);
    }

    private Double calculateSmartConfidence(ProductAnalysisResult analysis) {
        double score = 5.0; // –ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å

        if (analysis.getTrendScore() != null && analysis.getTrendScore() > 7) score += 1.0;
        if (analysis.getSeoTitles() != null && !analysis.getSeoTitles().isEmpty()) score += 1.0;
        if (analysis.getMainFeatures() != null && !analysis.getMainFeatures().isEmpty()) score += 1.0;
        if (analysis.getVisualQuality() != null && analysis.getVisualQuality() > 7) score += 1.0;

        return Math.min(10.0, score);
    }
}